1:当初始化hashMap的时候初始化的大小不一定是你传入的大小，底层会自动将你穿入的大小转化为离某个2的n次方最接近的大小，比如你传入大小为15实际生成的大小则是16，
这样做的原因是由于HashMap在底层进行hash获取的时候并不是进行取模运算的而是进行高位移位与运算，所以要初始化大小要服务2的n次方的规则，方便进行运算。
具体hashMap获取hash的过程可参考图hash.jpg

注意：HashMap有一个延缓加载的操作，也就是你初始化后其实并没有真正示例话而是到第一次使用的时候才会进行真正的示例化。

2：HashMap扩容，默认的负载因子是0.75扩容大小位原先大小的两倍，在多线程环境下扩容操作可能会造成条件竞争而产生死锁的现象。同时reHashing也是一个很耗时间的操作。

3：hashMap，hashTable，currentHashMap。
    1：hashMap线程不安全，底层是数组+链表+红黑树，key和value都允许为NUll
    2：hashTable是字典类的扩展，线程安全，通过锁住调用对象的方式实现，在多线程并发的环境下需要竞争同一把锁， 由于是串行执行的所以效率不高。
    底层是数组+链表 key不允许weiNULL
    3：currentHashMap：底层采用数组+链表+红黑树，
    早期的currentHashMap为了提高并发访问的效率，将整个数组筒分为了16个分段，分别为这些段配置单独的锁，以这样的方式来提高并发。
    后期的放弃了分段锁的技术，采用CAS+Synchronized进行锁细化 ，实现上Synchronized只会锁住CurrentHashMap中的链表或红黑树的首节点，而并不影响不同hashCode的捅，
    只要hash不冲突就不会有并发的问题，当某个线程进行put操作的时候发现有线程正在进行hashMap的扩容，那么该线程会加入到扩容线程队伍中协助进行扩容
    注意：currentHashMap是不允许插入NUll键的，而HashMap是允许的
    currentHashMap通过sizeClt（这是一个Volatile修饰的多线程可见的变量）进行扩容是的控制，值位-1时说明正在初始化，-n则说明有n-1个现在参与到了扩容操作，值为正数或者是0说明该currentHashMap还未被初始化，值为将要初始化的默认大小。

    CAS在CurrentHashMap中的作用是当进行put操作时发现数组中的某个元素没有头节点就就行CAS操作添加头节点，失败会重试。
    Synchronized在CurrentHashMap中的作用是当put有头节点的时候会去尝试锁住这个头节点再进行相关的添加操作。


